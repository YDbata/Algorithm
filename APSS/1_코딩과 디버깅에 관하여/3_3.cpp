//
// Created by kiz75 on 2023-10-17.
//
#include <stdio.h>
// 3.3 자주하는 실수


int main() {
    // 1) 산술 오버플로
    // 계산 과정에서 변수의 표현범위를 벗어나는 일이다.
    // 프로그래밍 대회에서 빈번하게 일어나며 이 내용은 조금 복잡하여 3.5에서 자세히 다룸

    // 2) 배열 범위 밖 원소에 접근
    // 설정한 배열 크기에 맞지 않게 접근하는 것이다.
    // 이 또한 흔하게 일어나는 실수 이며 때로는 버그가 런타임에러를 내서 찾을 수 있을 때도 있지만
    // 다른 값이 있을 경우 내지 않는 경우가 더 많아 찾기도 어렵고 틀린답을 반환할 때가 있다.
    int array[10], t;
    // 이렇게 되어서 어쩌다가 메모리 상에 array와 t가 연속적으로 들어간다면 array[10]에 접근했을 때 t의 값에 접근이 되면서
    // 프로그램상에서 이상한 답이 나올 수 있다.
    // 이를 해결하는 쉬운 방법은 배열의 크기를 넉넉하게 잡는 것이다.

    // 하지만 이런 실수 외에도 시작범위가 0이 아닌 1로 세는 범위를 혼동하는 경우가 있다.
    // 시작을 1로 세는 범위들은 잘못 넣으면 범위를 벗어 날 수 있다.

    // 3) 일관되지 않은 범위 표현 방식 사용하기
    // 배열의 잘못된 위치를 참조하는 오류가 발생하는 큰 원인이다.
    // 범위를 표현하는 방식에는 닫힌 방식과 열린 방식이 있다.
    // 닫힌 방식은 [2, 12] -> 2 <= x <= 12 이렇게 수의 범위가 구간을 모두 포함한다. 이는 공집합을 표현하기 어렵다.
    // 열린 방식은 (2, 12) -> 2 < x < 12로 구간에 경걔값이 2와 12가 포함되지 않는다.
    // 열린 구간에서는 1혹은 0부터 시작하고 싶을 때 음수를 사용해야하는 등 가상의 숫자가 필요하다.
    // 때문에 프로그래밍 언어들은 대부분 반열린 구간 [),(] 등을 사용한다.
    // ex1) 배열 생성시 array[10]으로 생성하면 0~9까지 즉 [0, 10)으로 생성이 된다.
    // ex2) C++ STL에서 begin(), end()는 begin()은 처음 데이터를 표현하지만 end()는 마지막 원소다음 가상의 원소를 가리킨다.

    // 위처럼 프로그래밍 언어에서 사용하는 범위는 장점이 있다.
    // 1. 첫 번째 값과 마지막 값을 이용하여 공집합을 쉽게 만들수 있다. -> [2,2)
    // 2. 두 구간이 연속해 있는지 쉽게 알수 있다. [a, b), [c, d)에서 b = c혹은 a = d인지만 확인하면 연속성이 확인된다.
    // 3. 구간의 크기를 [a,b)에서 b - a로 쉽게 알수 있다.

    // 장점이 많긴 하지만 자연어에서 사용하는 범위와 다르기 때문에 문제가 생기기도 한다.
    // 예를 들어 함수밖에서는 반열림구간을 쓰다가 함수 안에서는 열린구간을 사용할 때 두 범위의 차이가 생기면서
    // 문제가 될 수 있다.

    // 4) OFF-BY-ONE 오류
    // Off-by-one 오류는 계산의 줄기는 맞았으나 예외가 있어 틀리는 코드의 오류이다.
    // ex1) 100미터인 담장에 10미터 간격으로 울타리 기둥을 세운다.
    // 이때 필요한 기둥은 몇개일까요. 정답은 10개가 아닌 11개이다.
    // es2) 정수배열 A[]가 주어질 때 A[i]부터 A[j]까지 평균을 구할 때 합을 j - i 가 아닌 j - i + 1로 나누어야 한다.

    // 이런 오류는 반복문에서 부등호를 틀리거나 반열림구간, 닫힌 구간을 혼동하여 많이 일어난다.
    // 이런 오류를 방지하는 방법 중 하나는 최소 입력을 놓고 어떻게 동작하는지 생각하면서 프로그램을 짜는 것이다.

    // 5) 컴파일러가 잡아주지 못하는 상수 오타
    // 변수 명이나 함수명에서낸 오타는 컴파일러가 잡아준다. 하지만 상수를 잘못 입력해서 오답이 나올 때가 있다.

    // ex1) 3.2에서 설명한 것과 같이 코드와 데이터를 분리 하지 위해 데이터를 별도의 상수 배열에 저장하는 상황에서
    // 오타가 발생하면 디버깅을 해도 찾아낼 수가 없다.

    // ex2) 출력할 문자의 상수를 잘못쓰는 것도 종종 있는 실수이다. 과거 모의고사에서 "weird", "not weird"를 출력하는 문제에서
    // "wierd"로 잘못 출력한 사람들이 많았다.

    // ex3)
}
