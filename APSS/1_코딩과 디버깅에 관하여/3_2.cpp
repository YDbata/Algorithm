//
// Created by kiz75 on 2023-10-13.
//

// 3.2 좋은 코드를 짜기 위한 원칙

// 간결한 코드 작성하기
#include <iostream>
#include <vector>

using std::vector;

// 8) 코드
char* getMonthName(int month){
    if(month == 1) return "January";
    if(month == 2) return "February";
    return "December";
}


// 2) 아래코드의 메크로 버전
#define FOR(i, n) for(int i = 0; i <(n); ++i)


bool hasDuplicate(const vector<int>& array){
    /* 1_코딩과 디버깅에 관하여) 아래와 같이 작성하는 것은 아주 일반 적이나
    * 코딩 대회에서는 빠르고 간결해야 디버깅이 쉽기 때문에 메크로를 사용하곤 한다. */

    /* 메크로 비사용 버전
     * for (int i = 0; i < array.size(); ++i) {
        for (int j = 0; j < i; ++j) {
            if (array[i] == array[j])
                return true;

        }
    }*/

    // 메크로 사용버전
    // 이는 실무에서 사용하면 아주 안좋은 버전으로 평가 받는다. 하지만 대회에서 아래 상황은 막을 수 있다.
    /*for(int i = 0 ; i <arrray.size();++i)
     *  for(int j = 0;j<i;++i)
     *
     *  여기서 두번째 for문은 j를 증가시켜야 하지만 i가 증가됨.*/
    FOR(i, array.size())
        FOR(j, i)
            if(array[i] == array[j])
                return true;

    return false;
}

/* 3) 적극적으로 코드 재사용하기
 * 간결한 코드를 작성하기 위한 방법 중 직접적으로 코드를 모듈화 할 수 있다.
 * 모듈화 : 같은 코드가 반복되면 이를 함수나 클래스로 분리해서 재사용하는 것.
 * 대회나 실무에서는 시간에 쫓길 수는 있으나 모듈화를 해두는 편이 유지보수에 좋다.
 *
 * 4) 표준 라이브러리 공부하기
 * 간결한 코드를 작성하기 위해서는 제공되는 표준라이브러리를 적극적으로 사용하여 시간을 단축할 수 있다.
 * 하지만 언어의 문자열, 동적 배열, 스택 큐, 리스트, 사전(associative array) 등의 자료구조와 정렬등의 알고리즘은 필수적으로 알고 있어야 한다.
 *
 * 5) 항상 같은 형태로 프로그램을 작성하기
 * 프로그래밍 대회를 나가다 보면 여러 알고리즘을 반복적으로 작성하게 된다.
 * 처음에는 다양한 방법을 시도할 수 있지만 나중에는 한가지 방법을 정하여 실수를 줄이는 것이 필요하다.
 */


int main(){
    /* 6) 일관적이고 명료한 명명법 사용하기
     * 아래와 같은 변수 선언은 가독성에 아주 않좋아 실무와 대회에서 모두 기피된다.
     * 때문에 명명 규약을 알아두는게 좋다.
     */
    int a[10][10], i, j, p[10], k = 0, l = -1;

    /*
     * 아래 코드는 2차원 평면상에 한개의 점과 원이 주어졌을 때
     * 점이 원안에 포함되는지 여부를 반환하는 함수이다.
     * */
    bool judge(int x, int y, int cy, int cx, int cr);
    // 여기서 좌표가 x, y로 주어지지만 그 외에 이 함수가 언제 참을 반환하는지를 모른다.
    // 때문에 이럴때는 함수이름을 isInsideCircle이라고 짜주면 더욱 명료하게 안에 있을 때 참을 반환한다는 점을 알 수 있다.

    /* 7) 모든 자료를 정규화해서 저장하기
     * 같은 자료를 두가지로 저장하는 것은 공간 낭비이자 미세한 버그를 유발 할 수 있다.
     * ex) 6/9, 2/3은 같은 수를 뜻하지만 기약분수로 만들지 않는 이상 두개의 다른 자료로 취급되어 데이터가 중복으로 들어갈 수 있다.
     * ex2) 각도의 표현도 마찬가지이다. x축과의 각도를 계산하면 -30, 330, 690 등으로 표현되는데 이를 하나의 방법으로 표현하게 바꿀 수 있어야 한다.
     *
     * 이 외에도 문자열 인코딩, 시간 등에 대해서도 정규화를 해두는 것이 좋다.
     *
     * 8) 코드와 데이터를 분리하기
     * 코드영역과 상수데이터를 다루는 영역은 분리하는 것이 좋다.
     * 아래는 날짜에서 월을 문자열로 표현하는데 안좋은 예이다
     * */
    getMonthName(2); // February가 잘 출력되지만 함수 내용에 if로 쓰여 있어 아쉽다.

    // 아래처럼 데이터를 따로 분류하여 더 쉽게 사용할 수 있다.
    const char* monthName[] = { "January", "February", "march", "April", "May", "june",
                                "July", "August", "September", "October", "November", "December"};

    // 윤년처리하지 않을 때 달별 일수
    int daysIn[12] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

    /*이런식으로 사용하면 훨씬 쉽게 데이터를 저장하고 꺼내쓸 수 있다.
     * 이 기법의 또 다른 예는 체스판이다.
     * 예를 들어 체스의 말이 움직일 수 있는 위치를 프로그램으로 계산하는 대신 좌표로 가지고 있으면 편하다.
     * 다음은 기사(knight)의 움직임이다.
     * */
    const int knightDx[8] = {2, 2, -2, -2, 1, 1, -1, -1};
    const int knightDy[8] = {1, -2, 1, -1, 2, -2, 2, -2};
    /*위와 같이 작성하면 배열을 순회하면서 각 위치를 검사할 수 있어 비용이 프로그램을 짜는 것보다 적게 들어가게 된다.*/
}